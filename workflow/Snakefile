configfile: '../config/config.yaml'
VAMBCONDAENV = "/home/las/micromamba/envs/vamb"

import re
import os
import sys
import numpy as np
SNAKEDIR = os.path.dirname(workflow.snakefile)

sys.path.append(os.path.join(SNAKEDIR, 'scripts'))


def get_config(name, default, regex):
    res = config.get(name, default).strip()
    m = re.match(regex, res)
    if m is None:
        raise ValueError(
            f"Config option \"{name}\" is \"{res}\", but must conform to regex \"{regex}\"")
    return res


# set configurations
CONTIGS = get_config("contigs", "../config/contigs.txt", r".*") # each line is a contigs path from a given sample
SAMPLE_DATA = get_config("sample_data", "../config/samples2data.tsv", r".*") # each line is composed by 3 elements: sample id, forward_reads_path , backward_reads_path
INDEX_SIZE = get_config("index_size", "12G", r"[1-9]\d*[GM]$")
MIN_CONTIG_SIZE = int(get_config("min_contig_size", "2000", r"[1-9]\d*$"))
MIN_BIN_SIZE = int(get_config("min_bin_size", "200000", r"[1-9]\d*$"))

MIN_IDENTITY = float(get_config("min_identity", "0.95", r".*"))

MM_MEM = get_config("minimap_mem", "35GB", r"[1-9]\d*GB$")
MM_PPN = get_config("minimap_ppn", "10", r"[1-9]\d*$")
AVAMB_MEM = get_config("avamb_mem", "20GB", r"[1-9]\d*GB$")
AVAMB_PPN = get_config("avamb_ppn", "10", r"[1-9]\d*(:gpus=[1-9]\d*)?$")

CHECKM_MEM = get_config("checkm2_mem", "10GB", r"[1-9]\d*GB$")
CHECKM_PPN = get_config("checkm2_ppn", "10", r"[1-9]\d*$")
CHECKM_MEM_r = get_config("checkm2_mem_r", "30GB", r"[1-9]\d*GB$")
CHECKM_PPN_r = get_config("checkm2_ppn_r", "30", r"[1-9]\d*$")


AVAMB_PARAMS = get_config("avamb_params"," -o C --minfasta 200000  ", r".*")
AVAMB_PRELOAD = get_config("avamb_preload", "", r".*")

MIN_COMP = get_config("min_comp", "0.9", r".*")
MAX_CONT = get_config("max_cont", "0.05", r".*")

OUTDIR= get_config("outdir", "outdir_avamb", r".*")

try:
    os.makedirs(os.path.join(OUTDIR,"log"), exist_ok=True)
except FileExistsError:
    pass


# parse if GPUs is needed #
avamb_threads, sep, avamb_gpus = AVAMB_PPN.partition(":gpus=")
AVAMB_PPN = avamb_threads
CUDA = len(avamb_gpus) > 0

## read in sample information ##

# read in sample2path
IDS = []
sample2path = {}
fh_in = open(SAMPLE_DATA, 'r')
print(SAMPLE_DATA)
for line in fh_in:
    line = line.rstrip()
    fields = line.split('\t')
    IDS.append(fields[0])
    sample2path[fields[0]] = [fields[1], fields[2]]

# read in list of per-sample assemblies
contigs_list = []
fh_in = open(CONTIGS, 'r')
for line in fh_in:
    line = line.rstrip()
    contigs_list.append(line)

# target rule
rule all:
    input:
        contigs=os.path.join(OUTDIR,"contigs.flt.fna.gz"),
        abundance=os.path.join(OUTDIR,"abundance.npz") 



include: "rules/1_filter_rename_cat.smk"        # Remove each contig with length<2000 | rename them to {Sample}C{ID} | cat all contigs -> file with all contigs together
include: "rules/2_index_and_run_minimap2.smk"   # Map the reads to the contigs using minimap2 to produce bam files -> bam file for each sample? eg. both fw/rw reads
include: 'rules/3_sort_bam.smk'                 # Sort the bam files -> a bam file for each sample
include: 'rules/4_calculate_abundance.smk'      # Calculate the abundance for each bam file -> abundance for each bam file
include: 'rules/5_merge_abundance.smk'          # Merge the abundances -> npz file with abundances

# Input avamb:
#contigs=os.path.join(OUTDIR,"contigs.flt.fna.gz"),
#abundance=os.path.join(OUTDIR,"abundance.npz") 
# Generate the 3 sets of clusters and bins
